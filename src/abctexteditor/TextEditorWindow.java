/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package abctexteditor;

import abctexteditor.Files.ColorSetting;
import abctexteditor.Files.FileExtension;
import abctexteditor.Files.FileFormatter;
import abctexteditor.Utils.Paragraph;
import abctexteditor.Utils.StringHandler;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import javax.swing.undo.UndoManager;


/**
 *
 * @author rshum
 */
public class TextEditorWindow extends javax.swing.JFrame {

    private final String windowTitle = "ABC Text Editor";
    
    private File currentFile;
    private String fileName; 
    private FileFormatter fileFormatter;
    
    private UndoManager undoManager = new UndoManager();
    private ChangesDocumentListener documentListener = new ChangesDocumentListener();
    private StyledDocument document;
    //It will have the text color configuration, sorted by position
    private ArrayList<ColorSetting> colors;
    private int lenght_of_document_before_change;
    private int lenght_of_document_after_change;
    private int previous_caretPosition;
    private int caretPosition;
    
    public TextEditorWindow() {
        initComponents();
        this.colors = new ArrayList<>();
        this.document = textArea.getStyledDocument();
        document.addUndoableEditListener(undoManager);
        document.addDocumentListener(documentListener);
        fileFormatter = new FileFormatter();
        // Set up UI
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            this.setTitle(windowTitle);
            Image editorIcon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("Resources/abc.png"));
            setIcon(editorIcon);
        } 
        catch (Exception e) {
            System.out.println("Error while setting up system look and feel: " + e.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemNew = new javax.swing.JMenuItem();
        menuItemOpen = new javax.swing.JMenuItem();
        menuItemSave = new javax.swing.JMenuItem();
        menuItemSaveAs = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuItemUndo = new javax.swing.JMenuItem();
        menuItemRedo = new javax.swing.JMenuItem();
        menuItemCut = new javax.swing.JMenuItem();
        menuItemCopy = new javax.swing.JMenuItem();
        menuItemPaste = new javax.swing.JMenuItem();
        menuItemChangeColor = new javax.swing.JMenu();
        colorMenuItemBlue = new javax.swing.JMenuItem();
        colorMenuItemRed = new javax.swing.JMenuItem();
        colorMenuItemBlack = new javax.swing.JMenuItem();
        colorMenuItemYellow = new javax.swing.JMenuItem();
        colorMenuItemGreen = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(400, 200));

        panelMain.setBackground(new java.awt.Color(47, 53, 66));

        textArea.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jScrollPane3.setViewportView(textArea);

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("File");

        menuItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuItemNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/file.png"))); // NOI18N
        menuItemNew.setText("New");
        menuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemNew);

        menuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuItemOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/folder.png"))); // NOI18N
        menuItemOpen.setText("Open");
        menuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemOpenActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemOpen);

        menuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuItemSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/save.png"))); // NOI18N
        menuItemSave.setText("Save");
        menuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemSave);

        menuItemSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/diskette.png"))); // NOI18N
        menuItemSaveAs.setText("Save as");
        menuItemSaveAs.setToolTipText("");
        menuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemSaveAs);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        menuItemUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        menuItemUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/undo.png"))); // NOI18N
        menuItemUndo.setText("Undo");
        menuItemUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemUndoActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemUndo);

        menuItemRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        menuItemRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/redo.png"))); // NOI18N
        menuItemRedo.setText("Redo");
        menuItemRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRedoActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemRedo);

        menuItemCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/scissors.png"))); // NOI18N
        menuItemCut.setText("Cut");
        menuItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCutActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemCut);

        menuItemCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/copy.png"))); // NOI18N
        menuItemCopy.setText("Copy");
        menuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCopyActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemCopy);

        menuItemPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/paste-as-text.png"))); // NOI18N
        menuItemPaste.setText("Paste");
        menuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPasteActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemPaste);

        menuItemChangeColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/cores.jpg"))); // NOI18N
        menuItemChangeColor.setText("Change Color");

        colorMenuItemBlue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/blue.jpg"))); // NOI18N
        colorMenuItemBlue.setText("Blue");
        colorMenuItemBlue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorMenuItemBlueActionPerformed(evt);
            }
        });
        menuItemChangeColor.add(colorMenuItemBlue);

        colorMenuItemRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/red.jpg"))); // NOI18N
        colorMenuItemRed.setText("Red");
        colorMenuItemRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorMenuItemRedActionPerformed(evt);
            }
        });
        menuItemChangeColor.add(colorMenuItemRed);

        colorMenuItemBlack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/black.jpg"))); // NOI18N
        colorMenuItemBlack.setText("Black");
        colorMenuItemBlack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorMenuItemBlackActionPerformed(evt);
            }
        });
        menuItemChangeColor.add(colorMenuItemBlack);

        colorMenuItemYellow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/yellow.jpg"))); // NOI18N
        colorMenuItemYellow.setText("Yellow");
        colorMenuItemYellow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorMenuItemYellowActionPerformed(evt);
            }
        });
        menuItemChangeColor.add(colorMenuItemYellow);

        colorMenuItemGreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abctexteditor/Resources/green.jpg"))); // NOI18N
        colorMenuItemGreen.setText("Green");
        colorMenuItemGreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorMenuItemGreenActionPerformed(evt);
            }
        });
        menuItemChangeColor.add(colorMenuItemGreen);

        jMenu2.add(menuItemChangeColor);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    private void menuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewActionPerformed
        if (currentFile != null && documentListener.detectedChanges()){ // Missing attribute that checks if it has been changed 
            int choosenOption = JOptionPane.showConfirmDialog(null, "Do you want to save before closing?", "Wait!" , JOptionPane.YES_NO_OPTION);
            if (choosenOption == JOptionPane.YES_OPTION){
                saveFile();
            }
        }
        currentFile = null;
        textArea.setText("");
        setTitle("New file");
    }//GEN-LAST:event_menuItemNewActionPerformed

    private void menuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemOpenActionPerformed
        openFile();
    }//GEN-LAST:event_menuItemOpenActionPerformed

    private void menuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveActionPerformed
        saveFile();
    
    }//GEN-LAST:event_menuItemSaveActionPerformed

    private void menuItemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCutActionPerformed
        Clipboard clipBoard = getToolkit().getSystemClipboard(); // Used to cut,copy and paste functions
        String cutString = textArea.getSelectedText();
        StringSelection cutSelection = new StringSelection(cutString);
        clipBoard.setContents(cutSelection, cutSelection);
        textArea.replaceSelection("");
    }//GEN-LAST:event_menuItemCutActionPerformed

    private void menuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPasteActionPerformed
        try {
            textArea.paste();
        } 
        catch (Exception e) {
            System.out.println("Error while trying to paste text: " + e.getMessage());
        }
    }//GEN-LAST:event_menuItemPasteActionPerformed

    private void menuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCopyActionPerformed
        Clipboard clipBoard = getToolkit().getSystemClipboard(); // Used to cut,copy and paste functions
        String copyText = textArea.getSelectedText();
        StringSelection copySelection = new StringSelection(copyText);
        clipBoard.setContents(copySelection, copySelection);
    }//GEN-LAST:event_menuItemCopyActionPerformed

    private void menuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveAsActionPerformed
        saveFileFirstTime();
    }//GEN-LAST:event_menuItemSaveAsActionPerformed

    private void menuItemUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemUndoActionPerformed
        if(undoManager.canUndo()){
            undoManager.undo();
            //System.out.println("Editor log: Trying to UNDO an action");
        }
    }//GEN-LAST:event_menuItemUndoActionPerformed

    private void menuItemRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRedoActionPerformed
        if (undoManager.canRedo()) {
            undoManager.redo();
            //System.out.println("Editor log: Trying to REDO an action");
        }
    }//GEN-LAST:event_menuItemRedoActionPerformed

    private void colorMenuItemBlueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorMenuItemBlueActionPerformed
        changeColorOfSelectedText(Color.BLUE, 1);
    }//GEN-LAST:event_colorMenuItemBlueActionPerformed

    private void colorMenuItemRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorMenuItemRedActionPerformed
        changeColorOfSelectedText(Color.RED, 2);
    }//GEN-LAST:event_colorMenuItemRedActionPerformed

    private void colorMenuItemBlackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorMenuItemBlackActionPerformed
        changeColorOfSelectedText(Color.BLACK, 3);
    }//GEN-LAST:event_colorMenuItemBlackActionPerformed

    private void colorMenuItemYellowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorMenuItemYellowActionPerformed
        changeColorOfSelectedText(Color.YELLOW, 4);
    }//GEN-LAST:event_colorMenuItemYellowActionPerformed

    private void colorMenuItemGreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorMenuItemGreenActionPerformed
        changeColorOfSelectedText(Color.GREEN, 5);
    }//GEN-LAST:event_colorMenuItemGreenActionPerformed

    private void textAreaKeyTyped(java.awt.event.KeyEvent evt) {
        this.caretPosition = textArea.getCaretPosition();
        this.lenght_of_document_after_change = textArea.getDocument().getLength();
        if (this.caretPosition != this.previous_caretPosition) {
            updateColorSettings(this.lenght_of_document_before_change, this.lenght_of_document_after_change,
                    this.caretPosition);
        }
    }

    private void textAreaKeyPressed(java.awt.event.KeyEvent evt) {
        this.previous_caretPosition = textArea.getCaretPosition();
        this.lenght_of_document_before_change = textArea.getDocument().getLength();
    }
    
    
    private void updateColorSettings(int length_before, int lenght_after, int caretPos) {
        int toAdd = 1;
        int previous_caretPos = caretPos;
        boolean isSubstract = false;
        if (length_before > lenght_after) {
            toAdd = length_before - lenght_after;
            isSubstract = true;
            previous_caretPos = caretPos + toAdd;
        }
        ArrayList<ColorSetting> to_delete = new ArrayList<>();
        for (ColorSetting current_colorSetting : this.colors) {
            int current_start = current_colorSetting.start;
            int current_end = current_colorSetting.end;
            if (current_start > caretPos) {
                if (isSubstract) {
                    if (toAdd == 1) {
                        current_colorSetting.start -= toAdd;
                        current_colorSetting.end -= toAdd;
                    }
                } else {
                    current_colorSetting.start += toAdd;
                    current_colorSetting.end += toAdd;
                }
            } else if (current_start > caretPos && current_end < previous_caretPos) {
                to_delete.add(current_colorSetting);
            } else if (current_start > caretPos && previous_caretPos > current_start && previous_caretPos < current_end) {
                current_colorSetting.start = previous_caretPos;//should I add or substract one?
            } else if (current_start < caretPos && previous_caretPos > current_start && previous_caretPos < current_end) {
                current_colorSetting.end = current_start + (caretPos - current_start) + (current_end - previous_caretPos);
            } else if (current_start < caretPos && caretPos < current_end && current_end < previous_caretPos) {
                current_colorSetting.end = caretPos;////should I add or substract one?
            }

        }
        for (ColorSetting current_colorSetting : to_delete) {
            this.colors.remove(current_colorSetting);
        }
    }
    
    private void changeColorOfSelectedText(Color color, int color_number)
    {
        int start = textArea.getSelectionStart();
        int end = textArea.getSelectionEnd();
        int selectedLength = end - start;
        AttributeSet oldSet = this.document.getCharacterElement(end-1).getAttributes();
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(oldSet, StyleConstants.Foreground, color);
        this.document.setCharacterAttributes(start, selectedLength, aset, false);
        addColorSetting(color_number, start, end);       
    }
    
    public void loadText(String text) {
        int counter = - 1;
        int colored_check = 0;
        int colored_end = 0;
        String temp = "";
        this.colors.clear();
        boolean started_coloring = false;
        int current_color = 0;
        ColorSetting colorSetting;
        char[] text_char = text.toCharArray();
        for (int i = 0; i < text_char.length; i++) {
            char current_char = text_char[i];
            System.out.print(counter);
            System.out.print(" ");
            if (!started_coloring && current_char == '(') {
                char next_char = text_char[i + 1];
                colored_check = counter;
                switch (next_char) {
                    case '(':
                        current_color = 1;
                        i = i + 1;
                        started_coloring = true;
                        break;
                    case '*':
                        current_color = 2;
                        i = i + 1;
                        started_coloring = true;
                        break;
                    case '+':
                        current_color = 3;
                        i = i + 1;
                        started_coloring = true;
                        break;
                    case '-':
                        current_color = 4;
                        i = i + 1;
                        started_coloring = true;
                        break;
                    case '/':
                        current_color = 5;
                        i = i + 1;
                        started_coloring = true;
                        break;
                    default:
                        temp += current_char;
                        counter += 1;
                        break;
                }
            } else if (started_coloring) {
                String temporal = "";
                temporal += current_char;
                char next_char = text_char[i + 1];
                temporal += next_char;
                colored_end = counter + 1;
                switch (temporal) {
                    case "))":
                        if (current_color == 1) {
                            i = i + 1;

                            colorSetting = new ColorSetting(1, colored_check, colored_end);
                            this.colors.add(colorSetting);
                            started_coloring = false;
                        } else {
                            //not the same color tag
                            temp += current_char;
                        }
                        break;
                    case "*)":
                        if (current_color == 2) {
                            i = i + 1;
                            colorSetting = new ColorSetting(2, colored_check, colored_end);
                            this.colors.add(colorSetting);
                            started_coloring = false;
                        } else {
                            //not the same color tag
                            temp += current_char;
                        }
                        break;
                    case "+)":
                        if (current_color == 3) {
                            i = i + 1;
                            colorSetting = new ColorSetting(3, colored_check, colored_end);
                            this.colors.add(colorSetting);
                            started_coloring = false;
                        } else {
                            //not the same color tag
                            temp += current_char;
                        }
                        break;
                    case "-)":
                        if (current_color == 4) {
                            i = i + 1;
                            colorSetting = new ColorSetting(4, colored_check, colored_end);
                            this.colors.add(colorSetting);
                            started_coloring = false;
                        } else {
                            //not the same color tag
                            temp += current_char;
                        }
                        break;
                    case "/)":
                        if (current_color == 5) {
                            i = i + 1;
                            colorSetting = new ColorSetting(5, colored_check, colored_end);
                            this.colors.add(colorSetting);
                            started_coloring = false;
                        } else {
                            //not the same color tag
                            temp += current_char;
                        }
                        break;
                    default:
                        temp += current_char;
                        counter += 1;
                        break;
                }
            } else {
                counter += 1;
                temp += current_char;
            }
        }
        System.out.println(this.colors.size());
        textArea.setText(temp);
        for (ColorSetting current_colorSetting : this.colors) {
            System.out.println(current_colorSetting.toString());
            Color c;
            switch (current_colorSetting.color) {
                case 1:
                    c = Color.BLUE;
                    break;
                case 2:
                    c = Color.RED;
                    break;
                case 3:
                    c = Color.BLACK;
                    break;
                case 4:
                    c = Color.YELLOW;
                    break;
                case 5:
                    c = Color.GREEN;
                    break;
                default:
                    c = Color.DARK_GRAY;
                    break;
            }
            int current_end = current_colorSetting.end;
            int current_start = current_colorSetting.start;
            int selectedLength = current_end - current_start;
            AttributeSet oldSet = this.document.getCharacterElement(current_end - 1).getAttributes();
            StyleContext sc = StyleContext.getDefaultStyleContext();
            AttributeSet aset = sc.addAttribute(oldSet, StyleConstants.Foreground, c);
            this.document.setCharacterAttributes(current_start, selectedLength, aset, true);
        }
    }
    
    private void addColorSetting(int color_number, int start, int end) {
        ColorSetting new_color_setting = new ColorSetting(color_number, start, end);
        ColorSetting new_half_two_colorSetting = null;
        ArrayList<ColorSetting> to_delete = new ArrayList<>();
        for (ColorSetting current_colorSetting : this.colors) {
            int current_start = current_colorSetting.start;
            int current_end = current_colorSetting.end;
            if (current_end > start) {
                //the currentColorSetting is going to be overwriten
                if (start <= current_start && end >= current_end) {
                    to_delete.add(current_colorSetting);
                } else if (start < current_start && end > current_start && end < current_end) {
                    current_colorSetting.start = end + 1;
                } else if (start > current_start && start < current_end && end > current_end) {
                    current_colorSetting.end = start - 1;
                    //the new colorSetting is between the current_ColorSetting
                    //it is necessary split it in two
                } else if (start > current_start && end < current_end) {
                    int new_half_one_end = start - 1;
                    int new_half_two_start = end + 1;
                    current_colorSetting.end = new_half_one_end;
                    new_half_two_colorSetting = new ColorSetting(current_colorSetting.color, new_half_two_start, current_end);
                }
            }
        }
        for (ColorSetting current_colorSetting : to_delete) {
            this.colors.remove(current_colorSetting);
        }
        if (new_half_two_colorSetting != null) {
            this.colors.add(new_half_two_colorSetting);
        }
        this.colors.add(new_color_setting);
    }
    
    public String getColoredText() {
        String text = textArea.getText() + " ";
        this.colors.sort(Comparator.comparing(ColorSetting::getStart));
        String result = "";
        boolean hasNext = true;
        ColorSetting current = null;
        int counter = 0;
        if (this.colors.size() == 0) {
            hasNext = false;
        }
        else{
            current = this.colors.get(counter);
        }
        int textCounter = 0;
        for (char i : text.toCharArray()) {
            if (hasNext) {
                if (textCounter == current.start) {
                    switch (current.color) {
                        case 1: {
                            result += "((";
                            break;
                        }
                        case 2: {
                            result += "(*";
                            break;
                        }
                        case 3: {
                            result += "(+";
                            break;
                        }
                        case 4: {
                            result += "(-";
                            break;
                        }

                        case 5: {
                            result += "(/";
                            break;
                        }
                    }
                    result += i;
                    textCounter += 1;
                } else if (textCounter == current.end) {
                    switch (current.color) {
                        case 1: {
                            result += i + "))";
                            break;
                        }
                        case 2: {
                            result += i + "*)";
                            break;
                        }
                        case 3: {
                            result += i + "+)";
                            break;
                        }
                        case 4: {
                            result += i + "-)";
                            break;
                        }

                        case 5: {
                            result += i + "/)";
                            break;
                        }
                    }
                    textCounter += 1;

                    if (this.colors.size() > (counter + 1)) {
                        counter += 1;
                        current = this.colors.get(counter);
                    } else {
                        hasNext = false;
                    }
                } else {
                    textCounter += 1;
                    result += i;
                }

            } else {
                result += i;
            }
        }
        return result;
    }
    
    public void saveFile() {
        try {
            if (currentFile == null) {
                saveFileFirstTime();
            } else {
                String fileContent = textArea.getText();
                fileName = currentFile.getName();

                String fileExtension = getFileExtension(fileName).toUpperCase();
                FileExtension extension = FileExtension.valueOf(fileExtension);
                
                fileContent = getColoredText();
                
                String formattedText = fileFormatter.formatFile(fileContent, extension);

                FileWriter fileWriter = new FileWriter(currentFile);
                fileWriter.write(formattedText);
                this.setTitle(windowTitle + " - " + fileName);
                fileWriter.close();

                System.out.println("Editor log: Succesfully saved the file " + fileName);
            }

        } catch (Exception e) {
        }
    }
    
    public void saveFileFirstTime(){
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Save file");
            fileChooser.showSaveDialog(null);

            currentFile = fileChooser.getSelectedFile();
            
            // This is to validate if the save was not cancelled.
            if (currentFile != null){
                saveFile(); 
                
            }

            
            System.out.println("Editor log: Succesfully saved for the first time file " + fileName);
        } catch (Exception e) {
        }
    }
    
    public void openFile() {
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Select a file to open");
            fileChooser.showOpenDialog(null);

            currentFile = fileChooser.getSelectedFile();
            if (!currentFile.exists()) {
                currentFile = null;
                JOptionPane.showMessageDialog(null, "Failed to open the file", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Scanner reader = new Scanner(currentFile);
            String fileContent = "";
            while (reader.hasNextLine()) {
                fileContent += reader.nextLine() + "\n";
            }
            reader.close();

            fileName = currentFile.getName();
            String fileExtension = getFileExtension(fileName).toUpperCase();

            FileExtension extension = FileExtension.valueOf(fileExtension);
            String unformattedText = fileFormatter.unformatFile(fileContent, extension);
            loadText(unformattedText);

            //textArea.setText(unformattedText);
            this.setTitle(windowTitle + " - " + fileName);

        } catch (Exception e) {
        }
    }
    
    public void setIcon(Image image){
        setIconImage(image);
        //setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Resources/abc.png")));
    }
    
    public String getFileExtension(String filename) {
        String fileExtension = "";
        int dotIndex = filename.lastIndexOf(".");
        if (dotIndex > 0) {
            fileExtension = filename.substring(dotIndex + 1);
        }
        return fileExtension;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem colorMenuItemBlack;
    private javax.swing.JMenuItem colorMenuItemBlue;
    private javax.swing.JMenuItem colorMenuItemGreen;
    private javax.swing.JMenuItem colorMenuItemRed;
    private javax.swing.JMenuItem colorMenuItemYellow;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenu menuItemChangeColor;
    private javax.swing.JMenuItem menuItemCopy;
    private javax.swing.JMenuItem menuItemCut;
    private javax.swing.JMenuItem menuItemNew;
    private javax.swing.JMenuItem menuItemOpen;
    private javax.swing.JMenuItem menuItemPaste;
    private javax.swing.JMenuItem menuItemRedo;
    private javax.swing.JMenuItem menuItemSave;
    private javax.swing.JMenuItem menuItemSaveAs;
    private javax.swing.JMenuItem menuItemUndo;
    private javax.swing.JPanel panelMain;
    private javax.swing.JTextPane textArea;
    // End of variables declaration//GEN-END:variables
}
